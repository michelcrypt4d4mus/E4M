////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  IIIIIII SSSSSS                                                            //
//    II    SS                          InstallShield (R)                     //
//    II    SSSSSS      (c) 1996-1997, InstallShield Software Corporation     //
//    II        SS      (c) 1990-1996, InstallShield Corporation              //
//  IIIIIII SSSSSS                     All Rights Reserved.                   //
//                                                                            //
//                                                                            //
//  This code is generated as a starting installation template.  You should   //
//  modify it to provide all necessary steps for your installation.           //
//                                                                            //
//                                                                            //
//    File Name:  setup.rul                                                   //
//                                                                            //
//  Description:  InstallShield Script                                        //
//                                                                            //
//     Comments:  This template script performs a basic installation to a     //
//                Windows 95 or Windows NT platform. With minor modifications,//
//                this template can be adapted to create new, customized      //
//                installations.                                              //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


  // Include header file
#include "sddialog.h"

//////////////////// string defines ///////////////////

#define UNINST_LOGFILE_NAME      "remove.isu"

//////////////////// installation declarations ///////////////////

  // ----- DLL prototypes -----

     // generated


  // ---- script prototypes -----

     // generated
     prototype ShowDialogs();
     prototype MoveFileData();
     prototype HandleMoveDataError( NUMBER );
     prototype ProcessBeforeDataMove();
     prototype ProcessAfterDataMove();
     prototype SetupRegistry();
     prototype SetupFolders();
     prototype CleanUpInstall();
     prototype SetupInstall();
     prototype SetupScreen();
     prototype CheckRequirements();
     prototype DialogShowSdWelcome();
     prototype DialogShowSdLicense();
     prototype DialogShowSdAskDestPath();
     prototype DialogShowSdSelectFolder();
     prototype DialogShowSdFinishReboot();

     // E4M prototypes

    prototype SdE4MWelcome(STRING,STRING);

  // ----- global variables ------

     // generated
     BOOL        bWinNT, bIsShellExplorer;
     STRING      svDir;
     STRING      svName, svCompany, svSerial;
     STRING      svDefGroup;
     STRING      szAppPath;
     STRING      svSetupType;
     LIST        listStartCopy;


     // global variables


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//   MAIN PROGRAM                                                            //
//                                                                           //
//      The installation begins here by staring out by hiding the visible    //
//      installation window.  This is done to allow all the titles, images   //
//      etc.. to be setup before showing the main window.  The following     //
//      logic then performs the installation in a series of steps.           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
program
    Disable( BACKGROUND );

    SetupInstall();

    SetupScreen();

    if (ShowDialogs()<0) goto end_install;

    if (ProcessBeforeDataMove()<0) goto end_install;

    if (MoveFileData()<0) goto end_install;

    if (ProcessAfterDataMove()<0) goto end_install;

    if (SetupRegistry()<0) goto end_install;

    if (SetupFolders()<0) goto end_install;

    if (CleanUpInstall()<0) goto end_install;

  end_install:

    exit;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  ShowDialogs                                                    //
//                                                                           //
//  Purpose:  This function manages the operation of showing and navigating  //
//            the standard dialogs that exist in a installation.             //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
    NUMBER  nResult;
 begin

    Dlg_Start:
        // beginning of dialogs label

    Dlg_SdWelcome:
        nResult = DialogShowSdWelcome();
        if (nResult = BACK) goto Dlg_Start;

    Dlg_SdLicense:
        nResult = DialogShowSdLicense();
        if (nResult = BACK) goto Dlg_SdWelcome;

    Dlg_SdAskDestPath:
        nResult = DialogShowSdAskDestPath();
        if (nResult = BACK) goto Dlg_SdLicense;

    Dlg_SdSelectFolder:
        nResult = DialogShowSdSelectFolder();
        if (nResult = BACK) goto Dlg_SdAskDestPath;

    return 0;

 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  MoveFileData                                                   //
//                                                                           //
//  Purpose:  This function will setup and handle the data movement for      //
//            the installation.                                              //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
  NUMBER nResult, nDisk;
 begin

  nDisk = 1;
  SetStatusWindow( 0, "" );
  Disable( DIALOGCACHE );
  Enable( STATUS );
  StatusUpdate( ON, 100 );
  nResult = ComponentMoveData( MEDIA, nDisk, 0 );

  HandleMoveDataError( nResult );

  Disable( STATUS );

  return nResult;

 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: HandleMoveDataError                                             //
//                                                                           //
//  Purpose: This will handle the error (if any) during the move data        //
//           operation.                                                      //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
 begin

  switch (nResult)
  case 0:
       return 0;
  default:
       SprintfBox( WARNING, @TITLE_CAPTIONBAR, @ERROR_MOVEDATA, nResult );
       return nResult;
  endswitch;

 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: ProcessAfterDataMove                                            //
//                                                                           //
//  Purpose: This will perform any necessary operations needed after all     //
//           data has been moved.                                            //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
 begin

  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: ProcessBeforeDataMove                                           //
//                                                                           //
//  Purpose: This will perform any necessary operations prior to the         //
//           actual data move operation.                                     //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function ProcessBeforeDataMove()
  STRING svLogFile;
 begin

 InstallationInfo( @PRODUCT_NAME, @PRODUCT_NAME, @PRODUCT_VERSION, @PRODUCT_KEY );

  svLogFile = UNINST_LOGFILE_NAME;
  DeinstallStart( svDir, svLogFile, @UNINST_KEY, 0 );

  RegDBSetItem( REGDB_APPPATH, szAppPath );
  RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
  RegDBSetItem( REGDB_UNINSTALL_NAME, @UNINST_DISPLAY_NAME );

  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: SetupRegistry                                                   //
//                                                                           //
//  Purpose: This will setup the registry entries for this installation.     //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

function SetupRegistry()
STRING szKey;
STRING tmp;
INT x;
 begin

Enable(LOGGING);

if (RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE) < 0) then
    MessageBox("Call to RegDBSetDefaultRoot failed.", SEVERE);
    abort;
endif;

// setup driver

szKey = "\\SYSTEM\\CurrentControlSet\\Services\\e4mnt4";

if (RegDBCreateKeyEx(szKey,"") < 0) then
    MessageBox("Call to RegDBCreateKeyEx failed.", SEVERE);
    abort;
endif;

if (RegDBSetKeyValueEx(szKey,"Type",REGDB_NUMBER,"1",-1) < 0) then
    MessageBox("Call to RegDBSetKeyValueEx failed.", SEVERE);
    abort;
endif;

// Automatic start = 1, manual start = 3
if (RegDBSetKeyValueEx(szKey,"Start",REGDB_NUMBER,"1",-1) < 0) then
    MessageBox("Call to RegDBSetKeyValueEx failed.", SEVERE);
    abort;
endif;

if (RegDBSetKeyValueEx(szKey,"ErrorControl",REGDB_NUMBER,"1",-1) < 0) then
    MessageBox("Call to RegDBSetKeyValueEx failed.", SEVERE);
    abort;
endif;

if (RegDBSetKeyValueEx(szKey,"Group",REGDB_STRING,"Primary disk",-1) < 0) then
    MessageBox("Call to RegDBSetKeyValueEx failed.", SEVERE);
    abort;
 endif;

// setup the service

szKey = "\\SYSTEM\\CurrentControlSet\\Services\\e4mservice";

if (RegDBCreateKeyEx(szKey,"") < 0) then
    MessageBox("Call to RegDBCreateKeyEx failed.", SEVERE);
    abort;
endif;

// setup GUI's

if (RegDBSetKeyValueEx("\\SOFTWARE\\Classes\\e4m_volume\\DefaultIcon","",
    REGDB_STRING,TARGETDIR ^ 'volmount.exe,0',-1) < 0) then
    MessageBox("Call to RegDBSetKeyValueEx failed.", SEVERE);
    abort;
endif;

if (RegDBSetKeyValueEx("\\SOFTWARE\\Classes\\e4m_volume\\Shell\\open\\command","",
    REGDB_STRING,TARGETDIR ^ 'volmount.exe /e /b /v %1',-1) < 0) then
    MessageBox("Call to RegDBSetKeyValueEx failed.", SEVERE);
    abort;
endif;

if (RegDBSetDefaultRoot(HKEY_CLASSES_ROOT) < 0) then
    MessageBox("Call to RegDBSetDefaultRoot failed.", SEVERE);
    abort;
endif;

if (RegDBSetKeyValueEx("\\.vol","",REGDB_STRING,"e4m_volume",-1) < 0) then
    MessageBox("Call to RegDBSetKeyValueEx failed.", SEVERE);
   abort;
 endif;

return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: SetupFolders                                                    //
//                                                                           //
//  Purpose: This function will setup all the folders and shortcuts for the  //
//           installation.  This includes program groups, items for Win31    //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function SetupFolders()
STRING folder;
 begin

    folder = FOLDER_STARTMENU ^ "\\Programs\\" ^ svDefGroup;

    if (AddFolderIcon (folder, // adds the icon to the Start Programs menu
                  @MOUNT_VOLUME, // the name of the icon
                  '"' + TARGETDIR ^ 'volmount.exe' + '"' + " /b /e",
                  TARGETDIR, // working folder
                  TARGETDIR ^ "volmount.exe",// icon file
                  0, // icon ordinal
                  "", // shortcut key
                  REPLACE) < 0) then
       MessageBox("Call to AddFolderIcon failed.", SEVERE);
       abort;
    endif;

    if (AddFolderIcon (folder, // adds the icon to the Start Programs menu
                  @UNMOUNT_VOLUME, // the name of the icon
                  '"' + TARGETDIR ^ 'volmount.exe' + '"' +  " /b",
                  TARGETDIR, // working folder
                  TARGETDIR ^ "volmount.exe",// icon file
                  0, // icon ordinal
                  "", // shortcut key
                  REPLACE) < 0) then
       MessageBox("Call to AddFolderIcon failed.", SEVERE);
       abort;
    endif;

    if (AddFolderIcon (folder, // adds the icon to the Start Programs menu
                  @CREATE_VOLUME, // the name of the icon
                  '"' + TARGETDIR ^ 'volformat.exe' + '"', // command line expression
                  TARGETDIR, // working folder
                  TARGETDIR ^ "volformat.exe",// icon file
                  0, // icon ordinal
                  "", // shortcut key
                  REPLACE) < 0) then
       MessageBox("Call to AddFolderIcon failed.", SEVERE);
       abort;
    endif;


    if (AddFolderIcon (folder, // adds the icon to the Start Programs menu
                  @README, // the name of the icon
                  '"' + TARGETDIR ^ 'license.txt' + '"', // command line expression
                  TARGETDIR, // working folder
                  WINDIR ^ "notepad.exe",// icon file
                  0, // icon ordinal
                  "", // shortcut key
                  REPLACE) < 0) then
       MessageBox("Call to AddFolderIcon failed.", SEVERE);
       abort;
    endif;

    if (AddFolderIcon (folder, // adds the icon to the Start Programs menu
                  @HELPFILE, // the name of the icon
                  '"' + TARGETDIR ^ 'manual.hlp' + '"', // command line expression
                  TARGETDIR, // working folder
                  WINDIR ^ "winhelp.exe",// icon file
                  0, // icon ordinal
                  "", // shortcut key
                  REPLACE) < 0) then
       MessageBox("Call to AddFolderIcon failed.", SEVERE);
       abort;
    endif;

    return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: CleanUpInstall                                                  //
//                                                                           //
//  Purpose: This will cleanup the installation.  Anything that should       //
//      be released or deleted at the end of the installation should         //
//           be done here.                                                   //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()
 begin

  DialogShowSdFinishReboot();

  if (BATCH_INSTALL) then // ensure locked files are properly written
     CommitSharedFiles(0);
  endif;

  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: SetupInstall                                                    //
//                                                                           //
//  Purpose: This will setup the installation.  Any general initialization   //
//           needed for the installation should be performed here.           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()
 begin

  Enable( CORECOMPONENTHANDLING );

  CheckRequirements();

  listStartCopy = ListCreate(0);

  svDir     = PROGRAMFILES ^ "E4M";
  TARGETDIR = svDir;
  szAppPath = svDir;

  SdProductName( @PRODUCT_NAME );

  Enable( DIALOGCACHE );

  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  SetupScreen                                                    //
//                                                                           //
//  Purpose:  This function will set up the screen look.  This includes      //
//            colors, fonts, text to be displayed, etc.                      //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function SetupScreen()
  NUMBER  nDx, nDy;
 begin
   GetExtents( nDx, nDy );

   Enable( FULLWINDOWMODE );
   SetTitle( @TITLE_MAIN, 24, WHITE );

   SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); // Caption bar text.

   Enable( BACKGROUND );

   Delay( 1 );
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  CheckRequirements                                              //
//                                                                           //
//  Purpose:  This function will check all minimum requirements for the      //
//            application being installed.  If any fail, then the user       //
//            is informed and the installation is terminated.                //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
   NUMBER  nvDx, nvDy, nvResult;
   STRING  svResult;

begin
   // Check screen resolution.
   GetExtents( nvDx, nvDy );

   if (nvDy < 480) then
      MessageBox( @ERROR_VGARESOLUTION, WARNING );
      abort;
   endif;

   // Determine the target system's operating system.
   GetSystemInfo( OS, nvResult, svResult );

   bWinNT           = FALSE;
   bIsShellExplorer = FALSE;

   if (nvResult =  IS_WINDOWSNT) then
      bWinNT = TRUE;                   // Running Windows NT.
      // Check to see if the shell being used is EXPLORER shell.
      if (( nvResult = IS_WINDOWSNT ) || ( nvResult = IS_WINDOWS95 )) then
         if (GetSystemInfo( OSMAJOR, nvResult, svResult ) = 0) then
            if (nvResult >= 4) then
               bIsShellExplorer = TRUE;
            endif;
         endif;
      endif;

   elseif (nvResult = IS_WINDOWS95 ) then
      bIsShellExplorer = TRUE;

   endif;

end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdWelcome                                             //
//                                                                           //
//  Purpose: This function will handle the standard welcome dialog.          //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
  NUMBER nResult;
  STRING szTitle, szMsg;
 begin

  szTitle = "";
  szMsg   = "";
  nResult = SdE4MWelcome( szTitle, szMsg );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdLicense                                             //
//                                                                           //
//  Purpose: This function will handle showing the license agreement dialog. //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdLicense()
  NUMBER nResult;
  STRING szTitle, szMsg, szQuestion, szLicenseFile;
 begin

  szLicenseFile = SUPPORTDIR ^ "license.txt";
  szTitle    = "";
  szMsg      = "";
  szQuestion = "";
  nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdAskDestPath                                         //
//                                                                           //
//  Purpose: This function will handle the query of the user for the         //
//           destination directory.                                          //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdAskDestPath()
  NUMBER nResult;
  STRING szTitle, szMsg;
 begin

  szTitle = "";
  szMsg   = "";
  nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );

  TARGETDIR = svDir;

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdSelectFolder                                        //
//                                                                           //
//  Purpose: This function will handle the standard folder selection dialog. //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSelectFolder()
  NUMBER nResult;
  STRING szTitle, szMsg;
 begin

  if (svDefGroup = "") then
      svDefGroup = @FOLDER_NAME;
  endif;

  szTitle    = "";
  szMsg      = "";
  nResult    = SdSelectFolder( szTitle, szMsg, svDefGroup );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdFinishReboot                                        //
//                                                                           //
//  Purpose: This function will show the last dialog of the product.         //
//           It will allow the user to reboot and/or show some readme text.  //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
  NUMBER nResult, nDefOptions;
  STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
  NUMBER bOpt1, bOpt2;
 begin

  nDefOptions = SYS_BOOTMACHINE;
  szTitle     = "";
  szMsg1      = "";
  szMsg2      = "";
  nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );

  return nResult;
 end;

 // --- include script file section ---

#include "sddialog.rul"

 /*------------------------------------------------------------------------*/
 /*                                                                        */
 /*   Function: SdWelcome                                                  */
 /*                                                                        */
 /*   Descrip:  This dialog will show the welcome message to the user.     */
 /*                                                                        */
 /*   Misc:                                                                */
 /*                                                                        */
 /*------------------------------------------------------------------------*/
function SdE4MWelcome(szTitle, szMsg)
          STRING  szDlg, szTemp;
          NUMBER  nId, nMessage, nTemp;
          HWND    hwndDlg;
          BOOL    bDone;
        begin

          szDlg     = SD_DLG_WELCOME;
          nSdDialog = SD_NDLG_WELCOME;

           // record data produced by this dialog
           if (MODE=SILENTMODE) then
             SdMakeName( szAppKey, szDlg, szTitle, nSdWelcome );
             SilentReadData( szAppKey, "Result", DATA_NUMBER, szTemp, nId );
             return nId;
           endif;


          // ensure general initialization is complete
          if (!bSdInit) then
             SdInit();
          endif;

          if (EzDefineDialog( szDlg, "", "", SD_NDLG_WELCOME ) = DLG_ERR) then
              return -1;
          endif;

          // Loop in dialog until the user selects a standard button
          bDone = FALSE;

          while (!bDone)

             nId = WaitOnDialog( szDlg );

             switch(nId)
             case DLG_INIT:
                  // Put the corresponding Info in the List Field
                  if( szMsg != "" ) then
                      SdSetStatic(szDlg, SD_STA_MSG, szMsg);
                  endif;

                  SdSetStatic(szDlg, SD_STA_FIELD2, @WELCOME_1);
                  SdSetStatic(szDlg, SD_STA_MSG2, @WELCOME_2);
                  SdSetStatic(szDlg, SD_STA_FIELD2+3, "");

                  // these values from Sdrc.h

                  hwndDlg = CmdGetHwndDlg( szDlg );
                  SdGeneralInit( szDlg, hwndDlg, STYLE_NORMAL, szSdProduct );

                  if(szTitle != "") then
                       SetWindowText(hwndDlg, szTitle);
                  endif;

             case NEXT:
                  nId    = NEXT;
                  bDone  = TRUE;

              case BACK:
                   nId    = BACK;
                   bDone  = TRUE;

             case DLG_ERR:
                  SdError( -1, "SdWelcome" );
                  nId    = -1;
                  bDone  = TRUE;

             case DLG_CLOSE:
                  SdCloseDlg( hwndDlg, nId, bDone );

             default:
                  // check standard handling
                   if (SdIsStdButton( nId ) && SdDoStdButton( nId )) then
                      bDone = TRUE;
                  endif;
             endswitch;

          endwhile;

          EndDialog( szDlg );
          ReleaseDialog( szDlg );

          SdUnInit( );

          // record data produced by this dialog
          SdMakeName( szAppKey, szDlg, szTitle, nSdWelcome );
          SilentWriteData( szAppKey, "Result", DATA_NUMBER, "", nId );

          return nId;

       end;


































